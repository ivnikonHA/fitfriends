// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  MALE
  FEMALE
  DONT_MATTER
}

enum Location {
  PIONERSKAYA
  PETROGRADSKAYA
  UDELNAYA
  ZVEZDNAYA
  SPORTIVNAYA
}

enum Level {
  BEGGINER
  AMATEUR
  PRO
}

enum TrainingType {
  YOGA
  RUNNING
  BOX
  STRETCHING
  CROSSFIT
  AEROBICS
  PILATES
}

enum Time {
  SHORT
  MEDIUM
  LONG
  EXTRA
}

enum Payment {
  VISA
  MIR
  UMONEY
}

model User {
  id             String         @id @default(uuid())
  name           String
  passwordHash   String         @map("password_hash")
  email          String
  avatar         String
  sex            Sex
  dateOfBirth    DateTime?      @map("date_of_birth")
  description    String
  location       Location
  picture        String
  createdAt      DateTime       @default(now()) @map("created_at")
  level          Level
  trainingTypes  TrainingType[] @map("training_types")
  trainingTime   Time
  caloriesAll    Int            @map("calories_all")
  caloriesPerDay Int            @map("calories_per_day")
  ready          Boolean

  @@map("users")
}

model Training {
  id           String       @id @default(uuid())
  name         String
  picture      String
  level        Level
  trainingType TrainingType
  trainingTime Time
  price        Int
  calories     Int
  description  String
  sex          Sex
  video        String
  rating       Float        @default(0)
  trainer      String
  special      Boolean
  reviews      Review[]

  @@map("trainings")
}

model Order {
  id          String   @id @default(uuid())
  typeOfOrder String   @default("subscription") @map("type_of_order")
  trainingId  String   @map("training_id")
  price       Int
  quantity    Int
  payment     Payment
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("orders")
}

model Balance {
  id     String @id @default(uuid())
  userId String

  trainingId String
  quantity   Int

  @@map("balances")
}

model Review {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  trainingId String   @map("training_id")
  training   Training @relation(fields: [trainingId], references: [id])
  rate       Int
  text       String
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("reviews")
}
